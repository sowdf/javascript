什么是正则  和正则的写法

正则 ：  也叫规则，让计算机读懂人类的规则 都是操作字符串

写法 ：


var re = //;
var re = new RegExp(); 正则表达式

两个斜杠中间没有引号

5个正则方法
    test: 正则 去匹配字符串  如果匹配成功就返回true 否则就返回false;

    正则.test(字符串);

    \s 空格
    \S 非空格
    \d 数字
    \D 非数字
    \w 字符 （ 字母，数字，下划线）
    \W 非文字
    .  任意字符 \.代表真正的点
    \b 独立的部分 （起始结束空格）  用于获取class
    \B 非独立的部分
    \1 重复的子项

    search: 正则去匹配字符串，如果匹配成功则返回匹配成功的位置，没有找到则返回-1； 相当于indexOf
    写法 ：
        字符串.search(正则); 正则默认区分大小写

        如果不区分大小写 在正则的最后加i  表示不区分大小写

        var re = new RegExp('B','i');


    match : 正则去匹配字符串，如果匹配成功 就返回匹配成功的数组 ， 如果不成功就返回null

    写法 ：
        字符串.match(正则); 正则默认区分大小写  正则匹配成功就不会再去匹配了 g
        var re = /\d/g;全局匹配

    量词：匹配不确定的位数  + 至少出现一次

    replace : 正则去匹配字符串 ，如果匹配成功就替换成新的字符串
    写法：
        字符串.replace(正则,新字符串);  | 表示或的意思 第二个参数 可以 是一个函数
        字符串.replace(正则,callback);  返回匹配成功的字符串


    匹配子项 ：小括号（） 还要一个意思 分组操作  小括号优先计算
        把正则的整体 叫做母亲  左边开始第一个小括号 叫做母亲的第一个孩子


    字符类 ： 一组相似的元素  []  整体代表一个字符

    排除 ： 如果^写在[]里面代表排除的意思 - 从什么到什么

    量词 ： {4，7} 最少出现4次，最多出现7次 {4,}至少出现4次  {4}正好4次
            ？零次或者1次
            *至少出现零次
            ^正则的最开始位置代表起始的位置
            $正则的最后的位置代表结束的位置


